module shift_data(
	input                        clk,
	input                        rst_n,
	input                        reg [4:0] data_in,
	output                       dout
);

reg send_valid;
reg send_ready;


reg [4:0] data_send;

reg [2:0] state;
reg [2:0] next_state;
reg [2:0] shift_cnt;


localparam                       S_WAIT     = 1;
localparam                       S_SEND     = 2; //start bit



always@(posedge clk or negedge rst_n)
begin
	if(rst_n == 1'b0)
	begin
		shift_cnt<=3'd0;
//		send_valid <= 1'b0;
//		send_ready <= 1'b0;
		state <= S_WAIT;
	end
	else
		state <= next_state;
end


always@(*)
begin
	case(state)
		S_WAIT:
			if(send_ready == 1'b1)
				next_state <= S_SEND;
			else 
				next_state <= S_WAIT;			
		S_SEND:
			if(send_valid == 1'b1)
				next_state <= S_WAIT;
			else 
				next_state <= S_SEND;	
				
	endcase
	
end


always@(posedge clk or negedge rst_n)
begin
	if(rst_n == 1'b0)
		send_ready <= 1'b0;
	else if(state == S_WAIT && next_state != state)
	begin
		data_send <= data_in;
		send_ready <= 1'b1;
	end

end

always@(posedge clk or negedge rst_n)
begin
	if(rst_n == 1'b0)
		send_valid <= 1'b0;
	else if(state == S_SEND && next_state != state)
	begin	
		send_ready <= 1'b1;
	end

end





always@(posedge clk or posedge rst_n) begin
    if(reset)
        shift <= 5'b11010;
    else
        shift <= {shift[3:0], shift[4]};
end

